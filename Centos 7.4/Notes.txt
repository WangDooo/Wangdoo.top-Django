<---------更新时重启服务器------------------------------------------------------------->
systemctl restart uwsgi
systemctl restart nginx

<---------Navicat连接Mysql 修改Mysql密码------------------------------------------------------------->
1.mysql -uroot -p
2.mysql> use mysql
3.mysql> update user set password=password('新密码') where user='root';
4.mysql> flush privileges;
5. \q

<---------部署Django应用------------------------------------------------------------->
#注意: python2和python3 命令不同 python/python3.6
Centos系统自带python2,由于YUM和部分系统组件需要使用python2,python3版本的镜像会保留python2,python3版本的镜像运行解析器命令为: python3.6

1.在 /data/wwwroot/创建一个文件夹用来存放Django程序, 这里假设文件夹名为django_project

2.上传Django程序到/data/wwwroot/django_project目录下,这里假设文件夹名称project

3.(可选,推荐) 在/data/wwwroot/django_project 目录下运行命令 virtualenv env (py3 使用 python3.6 -m venv env ) 生产Python虚拟环境,以便隔离系统Python环境(env为虚拟环境生成的文件夹名称可以自定义)

4.启用Python虚拟环境,运行命令 source ./env/bin/activate,启用后服务器主机名会带上(env) 字样,表示激活成功

5.安装Django程序所需依赖 进入上传的Django程序目录 一般开发者都会将依赖信息保存到程序目录下的requirements.txt文件里 
运行命令 pip install -r requirements.txt安装所需要的依赖

6.根据自己网站程序等实际情况修改 程序目录里的配置文件,一般文件名为settings.py
在此文件中设置好数据库等相关信息,附Mysql设置,请根据实际情况修改
DATABASES = {
	'default': {
   		'ENGINE': 'django.db.backends.mysql',
    	'NAME': 'dj_blog',
		'PORT': '3306',
		'HOST': '127.0.0.1',
		'USER': 'root',
		'PASSWORD': '123456'
 	}
}

<---------文件操作------------------------------------------------------------->
cd /home					进入 ‘/home’ 目录
cd ..						返回上一级目录
cd ../..					返回上两级目录
cd -						返回上次所在目录
cp file1 file2				将file1复制为file2
cp -a dir1 dir2				复制一个目录
cp -a /tmp/dir1 .			复制一个目录到当前工作目录（.代表当前目录）
ls							查看目录中的文件
ls -a						显示隐藏文件
ls -l						显示详细信息
ls -lrt						按时间显示文件（l表示详细列表，r表示反向排序，t表示按时间排序）
pwd							显示工作路径
mkdir dir1					创建 ‘dir1’ 目录
mkdir dir1 dir2				同时创建两个目录
mkdir -p /tmp/dir1/dir2		创建一个目录树
mv dir1 dir2				移动/重命名一个目录
rm -f file1					删除 ‘file1’
rm -rf dir1					删除 ‘dir1’ 目录及其子目录内容

<---------Django模型：ORM------------------------------------------------------------->
ORM表现方式是编写数据模型类，这些类可以写在任何文件中，通常写在每个应用的models.py文件中。
每个数据类型都是django.db.models.Model的子类。
当数据模型写好之后，通过执行Django的数据迁移操作：
1.python manage.py makemigrations XXXXX
2.python manage.py migrate
以后如果要修改数据库表的结构，只需要修改数据模型类，迁移数据就能够实现数据库结构的调整。