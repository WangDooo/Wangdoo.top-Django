<------------------------------------------------------------------------>
def blog_title(request):
	blogs = BlogAritcles.objects.all()
	return render(request, "blog/titles.html", {"blogs":blogs})
render()的第一个参数必须是request,然后是模板位置和所传送的数据，数据是用类字典的形式传递给模板的。

<------------------------------------------------------------------------>
在模板目录中，有一个base.html文件，这个文件是将所有模板中公共的部分抽取出来。
在其他文件中只需要编写个性部分的代码。

base.html
<title>{% block title %}{% endblock %}</title>

Django模板中，{% block name %}是块标签，用它来包裹块内容，表示其间的内容可以自定义，
name是块的名称。块的结束标签都是{% endblock %}。

<------------------------------------------------------------------------>
view.py中
def blog_title(request):
	blogs = BlogAritcles.objects.all()
	return render(request, "blog/titles.html", {"blogsXXX":blogs})
-->{"blogsXXX":blogs}

titles.html中
{% for blog in blogsXXX %}
	<li>{{ blog.title }}</li>  # {{}}双花括号便是显示变量引用的数据
{% endfor %}


<--------Django 的MTV模式---------------------------------------------------------------->
动态网站开发，MVC模式（Model-View-Controller），Django也是一种MVC的框架
M：数据存储和读取部分，由Django的数据模型部分承担
V：确定要显示哪些数据及如何显示，由视图和模板进行处理
C：根据客户端请求映射到相应的视图，由Django框架根据URLconf设置，调用相应的函数

Django中Controller部分是由框架自动处理的，--->MTV模式
M：模型（Model），即数据存取层，模型是网站项目的基础，主要负责处理与数据相关的事务，如读取、写入数据等
T：模板（Template），即变现层，处理与表现有关的事务，例如如何在网页中显示相关内容
V：视图（Views），即业务逻辑层，包含存取模型及调取相应模板的相关逻辑，是M和T之间的桥梁。当Django得到用户的请求后，
根据URL映射关系调用相应的视图，视图则调用和处理有关数据。与模板相比，视图确定访问者能看到哪些数据，而模板确定怎么看到这些数据。

“中间件”被定义在settings.py的MIDDLEWARE_CLASSES中。
<------------------------------------------------------------------------>

<-----------Django 默认支持以下5个转化器------------------------------------------------------------->
str,匹配除了路径分隔符（/）之外的非空字符串，这是默认的形式
int,匹配正整数，包含0。
slug,匹配字母、数字以及横杠、下划线组成的字符串。
uuid,匹配格式化的uuid，如 075194d3-6885-417e-a8a8-6c931e272f00。
path,匹配任何非空字符串，包含了路径分隔符

path('article-detail/<int:id>/<slug>/', views.article_detail, name="article_detail"),
<------------------------------------------------------------------------>

<------------------------------------------------------------------------>

<------------------------------------------------------------------------>

<------------------------------------------------------------------------>

<------------------------------------------------------------------------>

<------------------------------------------------------------------------>

<------------------------------------------------------------------------>

<------------------------------------------------------------------------>

<------------------------------------------------------------------------>

<------------------------------------------------------------------------>